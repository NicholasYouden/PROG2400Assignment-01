class Node {
    int value;
    Node next;

    public Node(int value) {
        this.value = value;
        this.next = null;
    }
}

class LinkedList {
    private Node head;

    // Method to append a value to the end of the list
    public void append(int value) {
        Node newNode = new Node(value);
        if (head == null) {
            head = newNode;
            return;
        }
        Node current = head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = newNode;
    }

    // Method to prepend a value to the start of the list
    public void prepend(int value) {
        Node newNode = new Node(value);
        newNode.next = head;
        head = newNode;
    }

    // Method to get the total number of nodes in the list
    public int size() {
        int count = 0;
        Node current = head;
        while (current != null) {
            count++;
            current = current.next;
        }
        return count;
    }

    // Method to get the first node in the list
    public Node head() {
        return head;
    }

    // Method to get the last node in the list
    public Node tail() {
        if (head == null || head.next == null) {
            return head;
        }
        Node current = head;
        while (current.next != null) {
            current = current.next;
        }
        return current;
    }

    // Method to get the node at the given index
    public Node at(int index) {
        Node current = head;
        int count = 0;
        while (current != null) {
            if (count == index) {
                return current;
            }
            count++;
            current = current.next;
        }
        return null;
    }

    // Method to remove the last element from the list
    public void pop() {
        if (head == null || head.next == null) {
            head = null;
            return;
        }
        Node current = head;
        while (current.next.next != null) {
            current = current.next;
        }
        current.next = null;
    }

    // Method to check if the passed in value is in the list
    public boolean contains(int value) {
        Node current = head;
        while (current != null) {
            if (current.value == value) {
                return true;
            }
            current = current.next;
        }
        return false;
    }

    // Method to return the index of the node containing value
    public Integer find(int value) {
        Node current = head;
        int index = 0;
        while (current != null) {
            if (current.value == value) {
                return index;
            }
            index++;
            current = current.next;
        }
        return null;
    }
}

public static void main(String[] args) {
        LinkedList myList = new LinkedList();
        myList.append(10);
        myList.append(20);
        myList.append(30);
        myList.prepend(5);

        System.out.println("Size of the list: " + myList.size());  // Output: 4
        System.out.println("Head: " + myList.head().value);  // Output: 5
        System.out.println("Tail: " + myList.tail().value);  // Output: 30
        System.out.println("Value at index 2: " + myList.at(2).value);  // Output: 20
        System.out.println("Popped value: " + myList.pop());  // Output: 30
        System.out.println("Contains 20: " + myList.contains(20));  // Output: true
        System.out.println("Contains 30: " + myList.contains(30));  // Output: false
        System.out.println("Index of 10: " + myList.find(10));  // Output: 1
        System.out.println("Index of 30: " + myList.find(30));  // Output: null
    }
}
